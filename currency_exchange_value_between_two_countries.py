# -*- coding: utf-8 -*-
"""currency_exchange_value_between_two_countries

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UgDThedH227rsZdDBXT8uyVSR4KULglA
"""

import requests

API_KEY = '2facec4f59b3414c84c84e155dcebdd4'
BASE_URL = 'https://openexchangerates.org/api/latest.json'
CURRENCIES_URL = 'https://openexchangerates.org/api/currencies.json'

def get_exchange_rate(from_currency, to_currency):
    url = f"{BASE_URL}?app_id={API_KEY}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        rates = data.get('rates', {})

        if from_currency != 'USD':
            from_rate = rates.get(from_currency)
            if not from_rate:
                print(f"Error: Invalid base currency code '{from_currency}'.")
                return None
            usd_to_target = rates.get(to_currency)
            if not usd_to_target:
                print(f"Error: Invalid target currency code '{to_currency}'.")
                return None
            return usd_to_target / from_rate
        else:
            return rates.get(to_currency)

    except requests.exceptions.RequestException as e:
        print(f"Error fetching exchange rate data: {e}")
        return None

def convert_currency(amount, from_currency, to_currency):
    rate = get_exchange_rate(from_currency, to_currency)
    if rate is not None:
        return amount * rate
    else:
        return None

def list_currencies():
    try:
        response = requests.get(CURRENCIES_URL)
        response.raise_for_status()
        currencies = response.json()
        print("Available currencies and their codes:")
        for code, name in currencies.items():
            print(f"{code}: {name}")
    except requests.exceptions.RequestException as e:
        print(f"Error fetching currency list: {e}")

def main():
    while True:
        action = input("Enter 'convert' for currency value conversion or 'list' for list of available currencies (or 'exit' to stop conversion): ").lower()

        if action == 'convert':
            from_currency = input("Enter the currency you want to convert from (e.g., USD): ").upper()
            to_currency = input("Enter the currency you want to convert to (e.g., EUR): ").upper()
            try:
                amount = float(input(f"Enter the amount in {from_currency}: "))
            except ValueError:
                print("Invalid amount entered. Please enter a numeric value.")
                continue

            result = convert_currency(amount, from_currency, to_currency)
            if result is not None:
                print(f"{amount} {from_currency} is equal to {result:.2f} {to_currency}")
            else:
                print("Conversion failed. Please try again.")

        elif action == 'list':
            list_currencies()

        elif action == 'exit':
            print("Exiting the application.")
            break

        else:
            print("Invalid action. Please enter 'convert', 'list', or 'exit'.")

if __name__ == "__main__":
    main()

